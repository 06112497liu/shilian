<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bbd.dao.AbnormalCompanyInfoDao">
  <resultMap id="BaseResultMap" type="com.bbd.domain.AbnormalCompanyInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="company_id" jdbcType="INTEGER" property="companyId" />
    <result column="gmt_checkin" jdbcType="TIMESTAMP" property="gmtCheckin" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="gmt_delete" jdbcType="TIMESTAMP" property="gmtDelete" />
    <result column="delete_flag" jdbcType="TINYINT" property="deleteFlag" />
    <result column="addr_exception_type" jdbcType="TINYINT" property="addrExceptionType" />
    <result column="nbxh" jdbcType="VARCHAR" property="nbxh" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="company_type" jdbcType="VARCHAR" property="companyType" />
    <result column="district" jdbcType="VARCHAR" property="district" />
    <result column="remote_id" jdbcType="INTEGER" property="remoteId" />
    <result column="auth" jdbcType="VARCHAR" property="auth" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, company_id, gmt_checkin, gmt_create, gmt_modified, gmt_delete, delete_flag, addr_exception_type, 
    nbxh, type, company_type, district, remote_id, auth
  </sql>
  <select id="selectByExample" parameterType="com.bbd.domain.AbnormalCompanyInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from bbd_abnormal_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bbd_abnormal_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bbd_abnormal_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bbd.domain.AbnormalCompanyInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bbd_abnormal_info (company_id, gmt_checkin, gmt_create, 
      gmt_modified, gmt_delete, delete_flag, 
      addr_exception_type, nbxh, type, 
      company_type, district, remote_id, 
      auth)
    values (#{companyId,jdbcType=INTEGER}, #{gmtCheckin,jdbcType=TIMESTAMP}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModified,jdbcType=TIMESTAMP}, #{gmtDelete,jdbcType=TIMESTAMP}, #{deleteFlag,jdbcType=TINYINT}, 
      #{addrExceptionType,jdbcType=TINYINT}, #{nbxh,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, 
      #{companyType,jdbcType=VARCHAR}, #{district,jdbcType=VARCHAR}, #{remoteId,jdbcType=INTEGER}, 
      #{auth,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.bbd.domain.AbnormalCompanyInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bbd_abnormal_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="gmtCheckin != null">
        gmt_checkin,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
      <if test="gmtDelete != null">
        gmt_delete,
      </if>
      <if test="deleteFlag != null">
        delete_flag,
      </if>
      <if test="addrExceptionType != null">
        addr_exception_type,
      </if>
      <if test="nbxh != null">
        nbxh,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="companyType != null">
        company_type,
      </if>
      <if test="district != null">
        district,
      </if>
      <if test="remoteId != null">
        remote_id,
      </if>
      <if test="auth != null">
        auth,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="gmtCheckin != null">
        #{gmtCheckin,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtDelete != null">
        #{gmtDelete,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteFlag != null">
        #{deleteFlag,jdbcType=TINYINT},
      </if>
      <if test="addrExceptionType != null">
        #{addrExceptionType,jdbcType=TINYINT},
      </if>
      <if test="nbxh != null">
        #{nbxh,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="companyType != null">
        #{companyType,jdbcType=VARCHAR},
      </if>
      <if test="district != null">
        #{district,jdbcType=VARCHAR},
      </if>
      <if test="remoteId != null">
        #{remoteId,jdbcType=INTEGER},
      </if>
      <if test="auth != null">
        #{auth,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update bbd_abnormal_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.gmtCheckin != null">
        gmt_checkin = #{record.gmtCheckin,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtDelete != null">
        gmt_delete = #{record.gmtDelete,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleteFlag != null">
        delete_flag = #{record.deleteFlag,jdbcType=TINYINT},
      </if>
      <if test="record.addrExceptionType != null">
        addr_exception_type = #{record.addrExceptionType,jdbcType=TINYINT},
      </if>
      <if test="record.nbxh != null">
        nbxh = #{record.nbxh,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.companyType != null">
        company_type = #{record.companyType,jdbcType=VARCHAR},
      </if>
      <if test="record.district != null">
        district = #{record.district,jdbcType=VARCHAR},
      </if>
      <if test="record.remoteId != null">
        remote_id = #{record.remoteId,jdbcType=INTEGER},
      </if>
      <if test="record.auth != null">
        auth = #{record.auth,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bbd_abnormal_info
    set id = #{record.id,jdbcType=INTEGER},
      company_id = #{record.companyId,jdbcType=INTEGER},
      gmt_checkin = #{record.gmtCheckin,jdbcType=TIMESTAMP},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      gmt_delete = #{record.gmtDelete,jdbcType=TIMESTAMP},
      delete_flag = #{record.deleteFlag,jdbcType=TINYINT},
      addr_exception_type = #{record.addrExceptionType,jdbcType=TINYINT},
      nbxh = #{record.nbxh,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=TINYINT},
      company_type = #{record.companyType,jdbcType=VARCHAR},
      district = #{record.district,jdbcType=VARCHAR},
      remote_id = #{record.remoteId,jdbcType=INTEGER},
      auth = #{record.auth,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bbd.domain.AbnormalCompanyInfo">
    update bbd_abnormal_info
    <set>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=INTEGER},
      </if>
      <if test="gmtCheckin != null">
        gmt_checkin = #{gmtCheckin,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtDelete != null">
        gmt_delete = #{gmtDelete,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteFlag != null">
        delete_flag = #{deleteFlag,jdbcType=TINYINT},
      </if>
      <if test="addrExceptionType != null">
        addr_exception_type = #{addrExceptionType,jdbcType=TINYINT},
      </if>
      <if test="nbxh != null">
        nbxh = #{nbxh,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="companyType != null">
        company_type = #{companyType,jdbcType=VARCHAR},
      </if>
      <if test="district != null">
        district = #{district,jdbcType=VARCHAR},
      </if>
      <if test="remoteId != null">
        remote_id = #{remoteId,jdbcType=INTEGER},
      </if>
      <if test="auth != null">
        auth = #{auth,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bbd.domain.AbnormalCompanyInfo">
    update bbd_abnormal_info
    set company_id = #{companyId,jdbcType=INTEGER},
      gmt_checkin = #{gmtCheckin,jdbcType=TIMESTAMP},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      gmt_delete = #{gmtDelete,jdbcType=TIMESTAMP},
      delete_flag = #{deleteFlag,jdbcType=TINYINT},
      addr_exception_type = #{addrExceptionType,jdbcType=TINYINT},
      nbxh = #{nbxh,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      company_type = #{companyType,jdbcType=VARCHAR},
      district = #{district,jdbcType=VARCHAR},
      remote_id = #{remoteId,jdbcType=INTEGER},
      auth = #{auth,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithPageBounds" parameterType="com.bbd.domain.AbnormalCompanyInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from bbd_abnormal_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>