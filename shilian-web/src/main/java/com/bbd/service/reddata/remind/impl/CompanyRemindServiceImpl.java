/**
 * BBD Service Inc
 * All Rights Reserved @2016
 */
package com.bbd.service.reddata.remind.impl;

import com.bbd.common.CacheConstants;
import com.bbd.dao.CompanyRemindDailyCountInfoDao;
import com.bbd.dao.CompanyRemindDetailInfoDao;
import com.bbd.dao.CompanyRemindMonthlyCountInfoDao;
import com.bbd.dao.CompanyRemindStatisticsInfoDao;
import com.bbd.dao.remind.CompanyRemindDailyCountExtDao;
import com.bbd.dao.remind.CompanyRemindDetailExtDao;
import com.bbd.dao.remind.CompanyRemindStatisticExtDao;
import com.bbd.domain.*;
import com.bbd.service.reddata.remind.ICompanyRemindService;
import com.bbd.util.StringUtils;
import com.mybatis.domain.PageBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

/**
 * 企业提醒统计服务实现
 * @author tjwang
 * @version $Id: CompanyRemindStatisticServiceImpl.java, v 0.1 2017/6/8 0008 15:11 tjwang Exp $
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class CompanyRemindServiceImpl implements ICompanyRemindService {

    private Logger                           logger = LoggerFactory.getLogger(getClass());

    @Resource
    private CompanyRemindDetailInfoDao       companyRemindDetailInfoDao;

    @Resource
    private CompanyRemindStatisticsInfoDao   companyRemindStatisticsInfoDao;

    @Resource
    private CompanyRemindStatisticExtDao     companyRemindStatisticExtDao;

    @Resource
    private CompanyRemindDetailExtDao        companyRemindDetailExtDao;

    @Resource
    private CompanyRemindDailyCountInfoDao   companyRemindDailyCountInfoDao;

    @Resource
    private CompanyRemindMonthlyCountInfoDao companyRemindMonthlyCountInfoDao;

    @Resource
    private CompanyRemindDailyCountExtDao    companyRemindDailyCountExtDao;

    @Override
    public void updateOrCreate(boolean success, String nbxh, int sendYear, int method) {
        doUpdateOrCreate(success, nbxh, sendYear, method, 1);
    }

    @Override
    public void updateOrCreate(boolean success, String nbxh, int sendYear, int method, int num) {
        doUpdateOrCreate(success, nbxh, sendYear, method, num);
    }

    public void doUpdateOrCreate(boolean success, String nbxh, int sendYear, int method, int num) {
        int count;
        if (success) {
            count = companyRemindStatisticExtDao.updateSuccessNum(nbxh, sendYear, method, num);
        } else {
            count = companyRemindStatisticExtDao.updateFailNum(nbxh, sendYear, method, num);
        }
        // 无更新则创建
        if (count == 0) {
            Date now = new Date();
            CompanyRemindStatisticsInfo info = new CompanyRemindStatisticsInfo();
            info.setNbxh(nbxh);
            info.setSendYear(sendYear);

            if (success) {
                switch (method) {
                    case 1:
                        info.setMailSuccess(num);
                        break;
                    case 2:
                        info.setMsgSuccess(num);
                        break;
                    case 3:
                        info.setVoiceSuccess(num);
                        break;
                }
            } else {
                switch (method) {
                    case 1:
                        info.setMailFail(num);
                        break;
                    case 2:
                        info.setMsgFail(num);
                        break;
                    case 3:
                        info.setVoiceFail(num);
                        break;
                }
            }
            info.setGmtCreate(now);
            companyRemindStatisticsInfoDao.insertSelective(info);
        }
    }

    @Override
    public void insertDailyRemindCount(int year, int day) {
        CompanyRemindDailyCountInfoExample exam = new CompanyRemindDailyCountInfoExample();
        exam.createCriteria().andYearEqualTo(year).andDayEqualTo(day);
        PageBounds pb = new PageBounds(1, 1, false);
        List<CompanyRemindDailyCountInfo> ds = companyRemindDailyCountInfoDao.selectByExampleWithPageBounds(exam, pb);
        if (ds.size() > 0) {
            logger.info("company remind dailay count has generated by time {} - {}", year, day);
            return;
        }

        companyRemindDetailExtDao.deleteDailyRemindByDay(year, day);
        companyRemindDetailExtDao.insertDailyRemindCount(year, day);
    }

    @Override
    public void insertMonthlyRemindCount(int year, int month) {
        companyRemindDetailExtDao.deleteMonthlyRemindByMonth(year, month);
        companyRemindDetailExtDao.insertMonthlyRemindCount(year, month);
    }

    @Override
    @Cacheable(value = CacheConstants.STATISTIC_COMPANY_REMIND, keyGenerator = "simpleKeyGenerator")
    public List<CompanyRemindDailyCountInfo> queryDailyCountInfos(int year, int type, String district) {
        CompanyRemindDailyCountInfoExample exam = new CompanyRemindDailyCountInfoExample();
        CompanyRemindDailyCountInfoExample.Criteria c = exam.createCriteria();
        c.andTypeEqualTo(type).andYearEqualTo(year);
        if (StringUtils.isNotBlank(district)) {
            c.andDistrictEqualTo(district);
        }
        exam.setOrderByClause("day asc");

        List<CompanyRemindDailyCountInfo> list = companyRemindDailyCountInfoDao.selectByExample(exam);
        return list;
    }

    @Override
    @Cacheable(value = CacheConstants.STATISTIC_COMPANY_REMIND, keyGenerator = "simpleKeyGenerator")
    public List<CompanyRemindMonthlyCountInfo> queryMonthlyCountInfos(int year, int type, String district) {
        CompanyRemindMonthlyCountInfoExample exam = new CompanyRemindMonthlyCountInfoExample();
        CompanyRemindMonthlyCountInfoExample.Criteria c = exam.createCriteria();
        c.andTypeEqualTo(type).andYearEqualTo(year);
        if (StringUtils.isNotBlank(district)) {
            c.andDistrictEqualTo(district);
        }
        exam.setOrderByClause("month asc");

        List<CompanyRemindMonthlyCountInfo> list = companyRemindMonthlyCountInfoDao.selectByExample(exam);
        return list;
    }

    @Override
    @Cacheable(value = CacheConstants.STATISTIC_COMPANY_REMIND, keyGenerator = "simpleKeyGenerator")
    public int getYearRemindCount(int year, int type, String district) {
        return companyRemindDailyCountExtDao.queryYearRemindCount(year, type, district);
    }

    @Override
    @Cacheable(value = CacheConstants.STATISTIC_COMPANY_REMIND, keyGenerator = "simpleKeyGenerator")
    public int getMonthReindCount(int year, int month, int type, String district) {
        return companyRemindDailyCountExtDao.queryMonthRemindCount(year, month, type, district);
    }

    @Override
    public List<CompanyRemindStatisticsInfo> getCompanyRemindStatisticsInfos(String nbxh) {
        CompanyRemindStatisticsInfoExample example = new CompanyRemindStatisticsInfoExample();
        CompanyRemindStatisticsInfoExample.Criteria criteria = example.createCriteria();
        criteria.andNbxhEqualTo(nbxh);
        List<CompanyRemindStatisticsInfo> dbList = companyRemindStatisticsInfoDao.selectByExample(example);
        return dbList;
    }

    @Override
    public List<CompanyRemindDetailInfo> getCompanyRemindDetailInfos(String nbxh) {
        CompanyRemindDetailInfoExample exam = new CompanyRemindDetailInfoExample();
        exam.setOrderByClause("send_time DESC");
        CompanyRemindDetailInfoExample.Criteria c = exam.createCriteria();
        c.andNbxhEqualTo(nbxh);
        return companyRemindDetailInfoDao.selectByExample(exam);
    }
}
